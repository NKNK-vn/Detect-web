Newsgroups: soc.culture.vietnamese
From: lam@tesla.ece.wisc.edu
Subject: Glossary of Computer Science terms
Message-ID: <1992Dec7.211418.8494@news.media.mit.edu>
Originator: daemon@media-lab.media.mit.edu
Organization: SCV Relay
Date: Mon, 7 Dec 1992 21:14:18 GMT
Lines: 649

Thu+a ca'c Netters :

Sau -da^y la` mo^.t ba?ng -do^'i chie^'u danh tu+` Vie^.t-My~-Pha'p ve^` 
tin ho.c. Mong ca'c Netters go'p y' kie^'n.

----------------------------------------------------------------------


Attached is a draft glossary of Vietnamese computer terms and their
English and French equivalents, that were compiled by the folks at the
Institute of Informatics (Vie^.n Tin ho.c) in Viet Nam as part of an
effort in the publication of a general encyclopedia.

#include <std/disclaimers.h>

-----  Begin Included Text  -------------------------------------------

Wilhelm Schickard (1592-1635)
Blaise Pascal (1623-1662)
Gottfried Wilhelm Leibniz (1646-1716)
Charles Babbage (1791-1871)
George Boole (1815-1864)
Howard Aiken (1900-1973)
John von Neumann (1903-1957)
Grace Murray Hopper (1906-1992)
Alan Turing (1912-1954)
Phan Ddi`nh Die^.u (1936- )

A

ACM (Association for Computing Machinery)
ASCII (American Standard Code for Information Interchange)
an go^ ri't [xem thua^.t toa'n]
an toa`n du+~ lie^.u (data security)
a?nh nhi. pha^n (bit image)
a?nh bo^. nho+' (bitmap)

B

bai (byte; byte)
ba`n ddie^`u khie^?n (console; console, pupitre)
ba`n phi'm (keyboard; clavier)
ba`n phi'm chu+~ - so^' (alphanumeric keyboard; clavier alphanume'rique)
ba?n (version)
ba?n ghi (record; enregistrement)
ba?n in (listing)
ba?n ma^~u (prototype)
	ma?ng (array; tableau)
ba?ng ti'nh ddie^.n tu+? (spreadsheet)
ba?o ma^.t (confidentiality; confidentialite')
ba?o tri` (maintenance; maintenance)
ba(m (hashing)
ba(ng ddu.c lo^~ (perforated tape)
ba(ng tu+` (magnetic tape)
bi`a ddu.c lo^~ (perfored card)
bi`a ddie^`u khie^?n (control card; carte de controle)
bie^n di.ch (compilation)
bie^'n (variable; variable)
bie^'n cu.c bo^. (local variable)
bie^'n toa`n cu.c (global variable)
bit (tu+` tie^'ng Anh, vie^'t ta('t cu?a binary digit)
bie^?u die^~n tri thu+'c (knowledge representation)
bo' buo^.c (coercion)
bo^' tri' trang (pagination)
bo^. chuye^?n ddo^?i (converter (ADC, DAC); convertisseur (AIN, NIA))
bo^. chu+~ (font)
bo^. co^.ng (adder)
bo^. dda xu+? li' (multiprocessor)
bo^. dde^'m (counter; compteur)
bo^. ki' tu+. (character set; alphabet)
bo^. ma~ (code set)
bo^. ma~ ASCII [xem ASCII]
bo^. ma~ mo+? ro^.ng (extended code set)
bo^. ma~ VSCII [xem VSCII]
bo^. nho+' (memory)
bo^. nho+' a?o (virtual memory)
bo^. nho+' a^?n (cache memory)
bo^. nho+' chi'nh (main memory)
bo^. nho+' ke^'t ho+.p (associate memory)
bo^. nho+' dde^.m (buffer)
bo^. nho+' ddo^.ng (dynamic memory)
bo^. nho+' pha^n trang (paged memory)
bo^. nho+' phu. (secondary memory)
bo^. nho+' RAM (Random Access Memory)
bo^. nho+' ROM (Read Only Memory)
bo^. nho+' ti~nh (static memory)
bo^. no^'i ghe'p (interface)
bo^. pha't sinh tu+. ddo^.ng chu+o+ng tri`nh (automatic program generator)
bo^. thi'ch u+'ng (adaptor; adaptateur)
bo^. tri`nh (package; progiciel hoa(.c produit - programme)
bo^. vi xu+? li' (microprocessor)
bo^. xu+? li' (processor)
bo^. xu+? li' trung ta^m (CPU)
bu't sa'ng (light pen)
buy't (bus)

C

CAD/CAM
CD-ROM
ca`i dda(.t (implementing; implementation)
ca('t da'n (cut-paste)
ca^u le^.nh (statement; instruction)
ca^`n vu. (server; serveur)
ca^.p nha^.t (update; mise a` jour)
ca^'p pha't (allocation; allocation)
ca^'t giu+~ (save)
ca^'u hi`nh (configuration; configuration)
ca^u le^.nh (statement; instruction)
ca^'u tru'c (structure; structure)
ca^'u tru'c ca^y (tree structure)
ca^'u tru'c du+~ lie^.u (data structure)
ca^'u tru'c danh sa'ch (list structure)
ca^'u tru'c chu+o+ng tri`nh (program structure)
ca^'u tru'c ddie^`u khie^?n (control structure)
ca^'u tru'c ma.ng ma'y ti'nh (network structure)
	chu+o+ng tri`nh co' ca^'u tru'c (structured program)
ca^y (tree; arbre)
cha(~n le? (parity; parite')
cha(.n (blocking)
cha^?n ddoa'n (diagnostic; diagnostique)
che da^'u tho^ng tin (information hiding)
chen ha`ng (preempting; pre'emption)
che^' ba?n ddie^.n tu+? (desktop publishing)
che^'t ta('c (deadlock)
chie^'u (projection)
chi? le^.nh (command)
chi? so^' (index)
chip (chip; pastille)
cho.n ddu+o+`ng (routing; routage)
cho^`ng (stack; pile)
chua^?n (standard)
chua^?n ho'a (standardization; normalisation)
chuye^?n ddo^?i (conversion; conversion)
chuye^?n ma.ch (switching; commutation)
chu' gia?i (comment; commentaire)
chu+'ng minh ddi.nh ly' (theorem proving)
chu+'ng minh tu+. ddo^.ng (automatic proof)
chu+o+ng tri`nh (program; programme)
chu+o+ng tri`nh bie^n di.ch (compiler)
chu+o+ng tri`nh chi'nh (main program)
chu+o+ng tri`nh con (subroutine; sous-programme)
chu+o+ng tri`nh ddi'ch (object program)
chu+o+ng tri`nh thu+? (test program)
chu+o+ng tri`nh go^'c (source program)
chu+o+ng tri`nh tie^.n i'ch (utilities; utilitaires)
con cha.y (cursor; curseur)
con chuo^.t (mouse)
con tro? (pointer; pointeur)
co^ng nghe^. pha^`n me^`m (software engineering; ge'nie logiciel)
co^ng nghe^. tri thu+'c (knowledge engineering)
co^?ng (gate; port)
co^?ng song song (parallel port)
co^?ng no^'i tie^'p (serial port)
co+ che^' la^.p lua^.n
co+ so+? du+~ lie^.u (data base; base de donne'es)
co+ so+? du+~ lie^.u pha^n ta'n (distributed data base)
co+ so+? tri thu+'c (knowledge base; base de connaisance)
co+` (flag; drapeaux)
cu' pha'p (syntax; syntaxe)
cu+?a so^? (window; fene^tre)

D

da.ng Backus-Naur (BNF)
danh mu.c (directory; catalogue)
danh sa'ch (list)
da.y ho.c nho+` ma'y ti'nh
	ky' he^. (signature)
da^'u pha?y ti~nh (fixed point; virgule fixe')
da^'u pha?y ddo^.ng (floating point; virgule flotante)
da^'u ta'ch (delimiter)
di. bo^. (asynchronous)
di.ch (translation)
di.ch che'o (cross-translation)
di.ch chuye^?n (shift)
di.ch tu+. ddo^.ng (automatic translation)
di.ch vu. du+~ lie^.u
di.ch vu. vie^~n tin
do`ng du+~ lie^.u (data flow)
do.n ra'c (garbage collection)
dung lu+o+.ng bo^. nho+' (capacity)
dung sai (fault tolerant)
du+ thu+`a (redundant)
du+~ lie^.u (data)

Dd

dda chu+o+ng tri`nh (multiprogram)
dda na(ng (general purpose)
dda nhie^.m (multitasking)
dda xu+? li' (multiprocessing)
dda(.c ta? (specification)
dda^`u cuo^'i (terminal)
dda^`u ddo.c/ghi (read/write head)
dde^` mo^ (demonstration)
dde^. qui (recursion)
ddi~a tu+` (disk)
ddi~a cu+'ng (hard disk)
ddi~a me^`m (floppy disk)
ddi~a quang (optical disk)
ddi.a chi? (address)
ddi.a chi? tuye^.t ddo^'i (absolute address)
ddi.a chi? tu+o+ng ddo^'i (relative address)
ddi.a chi? a?o (virtual address)
ddie^.n toa'n [xem tin ho.c]
ddie^`u khie^?n ho.c (cybernetics)
ddie^`u khie^?n so^' (digital control)
ddie^`u kie^.n (condition)
ddi.nh danh (identification)
ddi.nh ddi.a chi? (addressing)
ddi.nh vi. (location)
ddo.c (read)
ddo'ng go'i (packing)
ddo^` ho.a ma'y ti'nh (computer graphics)
ddo^`ng du.ng (reentrant)
ddo^. pha^n gia?i (resolution)
ddo^. ddo hie^.u na(ng (performance)
ddo^. phu+'c ta.p (complexity)
ddo^. phu+'c ta.p thua^.t toa'n
ddo^. phu+'c ta.p ti'nh toa'n
ddo^. tin ca^.y (reliability)
ddo^'i (argument)
ddo^'i sa'nh (match)
ddo^'i thoa.i ngu+o+`i-ma'y (man-machine dialog)
ddo^'i tu+o+.ng (object)
ddo^`ng bo^. ho'a (synchronization)
ddo+n the^? (module)
ddo+n vi. ddie^`u khie^?n (control unit)
ddo+n vi. ddie^`u khie^?n ngoa.i vi (peripheral control unit)
ddo+n vi. so^' ho.c va` logic
ddo+n vi. xu+? li' trung ta^m (CPU)
ddu'ng dda('n (correctness)
ddu.ng ddo^. (collision)

E

ETHERNET

G

ga'n (assignment; affectation)
gia? le^.nh (pseudocode)
gia?i ma~ (decode; decodage)
giao die^.n (interface)
giao di.ch (transaction)
giao thu+'c (protocol; protocole)
giao tie^'p
	dda^`u no^'i (connector)
ghi (write)
go.i (call)
go.i theo gia' tri. (call by value)
go.i theo te^n (call by name)
go.i theo tham kha?o (call by reference)
	lie^n ho+.p (pipeline)
go+~ lo^~i (debug)

H

ha`m (function; fonction)
ha`ng ddo+.i (queue)
he^. chuye^n gia (expert system)
he^. dde^'m
he^. dde^'m nhi. pha^n (binary numeration)
he^. ddie^`u ha`nh (operating system; syste`me d'e'xploitation)
he^. ddie^`u ha`nh CP/M
he^. ddie^`u ha`nh DOS
he^. ddie^`u ha`nh UNIX
he^. ddie^`u ha`nh ma.ng (network operating system)
he^. pha't trie^?n (development system)
he^. qua?n tri. co+ so+? du+~ lie^.u (data management system)
he^. tho^'ng (system)
he^. tho^'ng phu+'c ta.p (complex system)
he^. ddie^`u pho^'i (monitor)
he^. tro+. giu'p quye^'t ddi.nh
hie^?n thi. (display)
hie^.u ba`i (token)
hie^.u u+'ng phu. (side effect; effet de bord)
ho.a tie^'t [xem i co^n]
ho.c tu+. ddo^.ng
ho^` so+ (document)
ho+.p di.ch (assembling)
ho+.p ngu+~ (assembly language)
ho^.p thu+ (mail box)

I

IBM (International Business Machines)
IFIP (International Federation for Information Processing)
ISO (International Organization for Standardization)
i co^n (icon)

K

ke^nh (channel)
ke^' thu+`a (inheritance; he'ritage)
ke^' thu+`a bo^.i (multiple inheritance)
ke^'t ghe'p (binding)
ke^'t ghe'p ddo^.ng (dynamic binding)
ke^'t no^'i (joint)
ke^'t xua^'t (output)
kha? chuye^?n (portability)
kha? ta'i ddi.nh vi. (relocatable)
khai ba'o (declaration)
kha(?ng ddi.nh (assertion)
khoa?n mu.c (item)
kho^'i (block; bloc)
kho+?i dda^`u (initialization; initialization)
kho+?i ddo^.ng la.i (mo^`i la.i) (reboot)
kho+?i ta.o [xem kho+?i dda^`u]
khuo^n da.ng (format; format)
ki'ch hoa.t (activate)
kie^?m chu+'ng (verification)
kie^?m thu+? (test)
kie^'n tru'c ma'y ti'nh
kie^?u (kie^?u du+~ lie^.u) (type)
kie^?m tra kie^?u (type checking)
kie^'n tru'c ma'y ti'nh
kie^?u (kie^?u du+~ lie^.u) (type)
kie^?u du+~ lie^.u tru+`u tu+o+.ng (abstract data type)
kie^?u ddo^.ng (dynamic type)
kie^?u ma.nh (strong type)
kie^?u ti~nh (static type)
ki' pha'p (notation)
ki' pha'p Ba Lan (Polish notation)
ki' pha'p giu+~a (infix notation)
ki' pha'p sau (postfix notation)
ki' pha'p tru+o+'c (prefix notation)
ki' tu+. (character)
	da^'u ca'ch (blank; blanc)

L

LAN (vie^'t ta('t cu?a Local Area Network)
la`m mi.n (refining; rafinement)
la(.p (iteration)
la^`n ngu+o+.c (backtracking; retour arrie`re)
la^.p li.ch (scheduling)
la^.p lua^.n (reasoning) [xem co+ che^' la^.p lua^.n]
la^.p lua^.n tu+. ddo^.ng (automatic reasoning)
	suy lua^.n lu`i (backward chaining)
	suy lua^.n tie^'n (forward chaining)
la^.p lua^.n xa^'p xi? (approximate reasoning)
la^.p tri`nh (programming; programmation)
la^.p tri`nh co' ca^'u tru'c (structured programming)
la^.p tri`nh ha`m (functional programming)
la^.p tri`nh logic (logic programming)
la^.p tri`nh hu+o+'ng ddo^'i tu+o+.ng (object-oriented programming)
le^.nh (instruction)
le^.nh macro
li' thuye^'t ti'nh toa'n (computation theory)
lie^n he^. ngu+o+.c (feedback)
lie^n ke^'t (link)
lie^n la.c (communication)
lo~i tu+` (xuye^'n tu+`)
lo.c
lo^~i (error; bug)
lo+`i go.i (call) [xem go.i]
lo+'p (class)
lu+u ddo^` (flowchart; organigramme)

M

ma~ (code; code)
ma~ ho'a (coding)
ma.ch (circuit)
ma.ch ti'ch ho+.p (intergrated circuit)
ma.ch in (printed circuit)
ma`n hi`nh (screen)
ma`n hi`nh tinh the^? lo?ng (LCD - Liquid Crystal Display)
ma.ng (network; re'seau)
ma.ng cu.c bo^. (local area network; re'seau local)
ma.ng ma'y ti'nh (computer network; re'seau des ordinateurs)
ma.ng Petri (Petri network; re'seau de Pe'tri)
ma'y a?o (virtual machine)
ma'y in (printer)
ma'y in ma tra^.n (matrix printer) [xem ma'y in kim]
ma'y in do`ng (in ro^.ng) (line printer)
ma'y in kim (dot printer)
ma'y in la de (laser printer)
ma'y in phun (ink-jet printer)
ma'y que't hi`nh (scanner)
ma'y ti'nh (computer; ordinateur)
ma'y ti'nh bo? tu'i (pocket calculator; calculatrice)
ma'y ti'nh tu+o+ng tu+. (analog computer; calculateur analogique)
ma'y ti'nh Pho^n No^i man (von Neumann machine; machine de von Neumann)
ma'y ti'nh ca' nha^n (personal computer)
ma'y ti'nh mini (minicomputer)
ma'y ti'nh lo+'n (mainframe)
ma'y Turing (Turing machine; machine de Turing)
ma'y ve~ (plotter; traceur de courbes)
ma'y vi ti'nh (micro-computer; micro-ordinateur)
ma(.c ddi.nh (default)
ma(.t na. (mask)
ma^.t ddo^. (density; densite')
ma^.t hie^.u (password)
ma^.t ma~ (cryptography)
ma^~u (pattern)
mie^`n (region; domain)
mo'c no^'i (link)
modem (vie^'t ta('t cho Modulator-Demodulator)
mo^ddun (module; module) [co`n go.i la` ddo+n the^?]
mo^'i no^'i
MOS (vie^'t ta('t cu?a Metal Oxide Semiconductor)
mo^ hi`nh (model)
mo^ pho?ng (simulation)
mo^ to+ suy lua^.n (inference engine)
mo^i tru+o+`ng la^.p tri`nh (programming environment)
mo^'t (mode)
mo^`i (boot) (co`n go.i la` kho+?i ddo^.ng)
mo^`i la.i (reboot) [xem kho+?i ddo^.ng la.i]
mo+ nuy [xem thu+.c ddo+n]

N

na.p (load)
ne'n (compress)
nga('t (interruption)
nga^n ha`ng du+~ lie^.u (data bank; banque de donne'es)
ngoa.i vi (peripheral)
ngo^n ngu+~ ba^.c cao (high-level language; langage e'volue')
ngo^n ngu+~ la^.p tri`nh
ho+.p ngu+~ (assembly language)
	ALGOL (vie^'t ta('t cu?a ALGOrithmic Language)
	COBOL (vie^'t ta('t cu?a COmmon Business Oriented Language)
	FORTRAN (vie^'t ta('t cu?a FORmula TRANslator)
	LISP (vie^'t ta('t cu?a LISt Processing)
	PL/I (vie^'t ta('t tu+` Programming Language One)
	BASIC (Vie^'t ta('t tu+` Beginner's All-purpose Symbolic Instruction Code)
	SIMULA
	PASCAL
	Ngo^n ngu+~ C
	PROLOG (vie^'t ta('t cho PROgramming in LOGic)
	ADA
	MODULA 2
	SMALLTALK
ngo^n ngu+~ thua^.t toa'n (algorithmic language)
nguye^n li' gia?i (resolution principle)
ngu+~ ca?nh (context; contexte)
ngu+~ nghi~a (semantics; se'mantique)
ngu+~ nghi~a ki' hie^.u (denotational semantics; denotationelle
semantique)
ngu+~ nghi~a thao ta'c (operational semantics; operationnel semantique)
ngu+~ nghi~a tie^n dde^` (axiomatic semantics)
ngu+o+`i ma'y [xem ro^ bo^'t]
nha~n (label, tag; e'tiquette)
nha^.n da.ng (pattern recognition; reconnaissance des formes)
nha^.n da.ng tie^'ng no'i
nha^.n bie^'t ba(`ng thi. gia'c
	hie^?u ngo^n ngu+~ tu+. nhie^n va` nha^.n bie^'t tie^'ng no'i
nha^'t qua'n (consistence)
nha^'t the^? (integrity)
nha(.t le^.nh (fetch)
nhi. pha^n (binary) [xem he^. co+ so^' hai]

O

o^to^mat (automaton; automate)
o+ristic (phu+o+ng pha'p) [heuristic method; me'thode heuristique]
o^? ddi~a (disk driver)
o^? ddi~a a?o (virtual driver)

P

pha.m vi (scope)
pha?n ho^`i [xem lie^n he^. ngu+o+.c]
	ca^'p ba^.c (hierarchy; hie'rarchie)
pha^n chia tho+`i gian (time sharing)
pha^n chu`m (clustering)
pha^n ddoa.n (segmentation)
pha^n loa.i (classification)
pha^n ta'ch (decomposition; de'composition)
pha^n ti'ch cu' pha'p (syntactical analysis; analyse syntaxique)
pha^n ti'ch du+~ lie^.u (data analysis)
pha^n ti'ch he^. tho^'ng (systems analysis)
pha^n trang (paging; pagination)
pha^`n cu+'ng (hardware)
pha^`n me^`m (software)
pha^`n vu+~ng (firmware)
phie^n (session)
phie^'u (bi`a) (card)
pho?ng ta.o (emulation)
pho^ng (chu+~) (font)
phu. thuo^.c ha`m (functional dependency)
pixel (vie^'t ta('t cu?a picture element)
phu+o+ng pha'p (method; me'thode)
phu+o+ng pha'p lua^.n (methodology)
phu+o+ng pha'p o+ristic (heuristic method) [xem o+ristic]
pha^n ti'ch tre^n xuo^'ng (top-down analysis)
pha^n ti'ch du+o+'i le^n (bottom-up analysis)

Q

qua' ta?i (overloading)
tin ho.c qua?n li' (management; gestion)
qua?n tri. du+~ lie^.u (data management)

R

ra~nh (track)
re~ nha'nh (branch; rupture dese'quence, branchement)
ro^ bo^'t (robot; robot)
ro+`i ra.c (discrete)

S

sa('p xe^'p (sort)
sinh so^' nga^~u nhie^n (random number generation)
sie^u ma'y ti'nh (supercomputer)
sie^u ngu+~ (metalanguage)
soa.n tha?o (edit)
song song (parallelism; paralle'lisme)
so^' ho'a (digitize)
so+ ddo^` kho^'i (flow chart)
ca'p quang (optical cable)
spun linh (spooling)
ta'i du.ng (reusability)
na(ng lu+.c ti'nh toa'n (computing power; puissance de calcul)

T

ta`i nguye^n (resource; ressource)
ta^.p le^.nh (instruction set)
te^n go.i (name, identifier)
te^.p (file; fichier)
tham bie^'n (parameter)
tham kha?o (reference)
thanh ghi (register)
thanh ghi chi? so^' (indexed register)
thanh ghi ddoa.n (segment register)
thanh ti'ch lu~y (accumulator)
thao ta'c vie^n (operator)
tha?o chu+o+ng vie^n (ngu+o+`i la^.p tri`nh) (programmer)
tha^m nha^.p (access)
tha^n thie^.n ngu+o+`i su+? du.ng (user-friendly)
the^? hie^.n (interpretation)
the^? nghie^.m (instance)
the^' he^. ma'y ti'nh (computer generation; ge'ne'ration d'ordinateurs)
thie^'t bi. hie^?n thi. (display)
thie^'t bi. ngoa.i vi (peripheral) [xem ngoa.i vi]
thie^'t ke^' co' ma'y ti'nh ho^~ tro+. (CAD: computer-aided design)
thie^'t ke^' he^. tho^'ng (systems design)
thoa't ra (escape)
tho^ng ba'o (message)
tho^ng di.ch (interpretation; interpre'tation)
tho^ng tin (information; information)
tho+`i gian tha^m nha^.p (access time)
tho+`i gian chu ki` (cycle time)
tho+`i gian thu+.c (real time)
thuo^.c ti'nh (attribute)
thu tha^.p du+~ lie^.u (data acquisition)
thu tha^.p tri thu+'c (knowledge acquisition)
thu? tu.c (procedure; proce'dure)
thua^.t toa'n (algorithm)
thu+ ti'n ddie^.n tu+? (electronic mail; messagerie e'lectronique)
thu+ vie^.n chu+o+ng tri`nh (library; bibliothe`que)
thu+.c ddo+n (menu) [xem mo+ nuy]
tie^`n to^' (prefix)
tie^'n tri`nh (process)
tie^'p ca^.n (approach)
tie^'p ca^.n tre^n xuo^'ng (top-down approach)
tie^'p ca^.n du+o+'i le^n (bottom-up approach)
ti`m kie^'m (search)
ti`m kie^'m nhi. pha^n (binary search)
tin ho.c (informatics; informatique)
tin ho.c ho'a (computerize)
tin ho.c pha^n ta'n (distributed information systems)
toa'n ha.ng (operand)
toa'n lamdda ( -calculus)
toa'n tu+?, phe'p toa'n (operator)
toa`n ve.n (integrity)
to^'i u+u ma~ (code optimization)
to^'i u+u tho+`i gian (time optimization)
to^?ng ho+.p tie^'ng no'i (speech syntheses; synthe`se de la parole)
to^?ng kie^?m tra (checksum)
to^?ng qua't (genericity)
tra.m la`m vie^.c (workstation)
treo (hang)
tri' tue^. nha^n ta.o (artificial intelligence)
tri`nh (routine)
tri`nh bie^n di.ch (compiler; compilateur)
tri`nh ddie^`u pho^'i (supervisor, scheduler; superviseur)
tri`nh ho+.p di.ch (assembler)
tri`nh soa.n tha?o (editor; editeur)
tri`nh tho^ng di.ch (interpreter)
trong suo^'t (transparency; transparence)
tro^.n (merge)
tro^'ng tu+` (drum)
trung ta^m ti'nh toa'n (computing center; centre de calcul)
truye^`n du+~ lie^.u (data transmission; transmission de donne'es)
truye^`n tho^ng (communication) [xem lie^n la.c]
truye^`n tho^ng ba'o (message passing)
tru+o+`ng (field)
tru+`u tu+o+.ng (abstract)
tru+`u tu+o+.ng du+~ lie^.u (data abstraction)
tru+`u tu+o+.ng ha`m (function abstraction)
tru+`u tu+o+.ng tie^'n tri`nh (process abstraction)
tru+.c tuye^'n (on-line)
	gia'n tuye^'n (off-line)
tua^`n tu+. ho'a (serialization; se'rialisation)
tu`y cho.n (option)
tu+` (word)
tu+` ddie^?n (dictionary; dictionnaire)
tu+` ddie^?n du+~ lie^.u (data dictionary)
tu+` kho'a (keyword; motcle')
tu+. ddo^.ng (automatic)
tu+. ddo^.ng ho'a (automatization)
tu+. ddo^.ng ho'a va(n pho`ng (office automation; bureautique)
tu+o+ng ho+.p (compatibility; compatibitite')
tu+o+ng ta'c (interaction; interaction)
tu+o+ng tranh (concurrency)

U

u+u tie^n (priority)

V

VSCII (Vietnamese Standard Code for Information Interchange)
VLSI (very large scale intergation)
va`o/ra (input/output)
va(n pha.m (grammar; grammaire)
vi la^.p tri`nh (micro programming)
vi ru't (virus)
vi tin ho.c (microcomputing; micro-informatique)
vie^~n tho^ng (telecommunications; te'le'communication)
vie^~n tin (remote processing)
vie^~n tin ho.c (telematics; te'le'matiques)
vo`ng so^'ng (life cycle)
vo? (shell)

X

xa^u (string; chaine)
xe^ ma pho (semaphore; se'maphore)
xo^? (dump)
xu+? li' (processing)
xu+? li' tua^`n tu+. (sequential processing)
xu+? li' song song (parallel processing)
xu+? li' vec to+ (xu+? li' ba?ng) (vector processing)
xu+? li' a?nh (picture processing, image processing)
xu+? li' tho^ng tin (data processing; traitement de l'information)
xu+? li' va(n ba?n (text processing; traitement de texte)

-----  End Included Text  -------------------------------------------
